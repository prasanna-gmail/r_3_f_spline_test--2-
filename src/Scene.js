/*
  Auto-generated by Spline
*/
import React, { useState, useEffect } from 'react'
import useSpline from '@splinetool/r3f-spline'
import { Clone, PerspectiveCamera, OrthographicCamera, ContactShadows } from '@react-three/drei'
import { Physics, Debug, usePlane, useCompoundBody } from '@react-three/cannon'

export default function Scene({ ...props }) {
  const { nodes, materials } = useSpline('https://prod.spline.design/RlGf0SBK5pkSy-nY/scene.splinecode')

  function Little(props) {
    const { nodes } = useSpline('/bigandsmall.spline')
    const [little] = useCompoundBody(() => ({
      mass: 1,
      ...props,
      shapes: [
        { type: 'Sphere', args: [0.7], position: [0, -0.1, 0.1] },
        { type: 'Sphere', args: [0.2], position: [-0.1, 0.7, 0.2] },
        { type: 'Sphere', args: [0.2], position: [0, -0.5, -0.6] },
        { type: 'Sphere', args: [0.1], position: [-0.4, -0.9, 0.2] },
        { type: 'Sphere', args: [0.1], position: [0.2, -0.9, 0.5] },
      ],
    }))
    return <Clone ref={little} scale={0.01} position={[0, 0, 0]} object={nodes.Little} dispose={null} />
  }

  function Ball2(props) {
    const { nodes, materials } = useSpline('https://prod.spline.design/RlGf0SBK5pkSy-nY/scene.splinecode')
    const [ball2] = useCompoundBody(() => ({
      mass: 1,
      ...props,
      shapes: [
        { type: 'Sphere', args: [1], position: [0, 0, 0] },

      ],
    }))
    return <Clone ref={ball2} scale={1} position={[0, 0, 0]} object={nodes.Sphere} dispose={null} />
  }
  function Ground2(props) {
    const { nodes, materials } = useSpline('https://prod.spline.design/RlGf0SBK5pkSy-nY/scene.splinecode')
    const [ball2] = useCompoundBody(() => ({
      mass: 1,
      ...props,
      shapes: [
        { type: 'Sphere', args: [1], position: [0, 0, 0] },

      ],
    }))
    return <Clone ref={ball2} scale={1} position={[0, 0, 0]} object={nodes.Sphere} dispose={null} />
  }




  return (
    <>
      <color attach="background" args={['#afbed9']} />

      <group {...props} dispose={null}>
        <PerspectiveCamera
          name="Camera"
          makeDefault={true}
          far={100000}
          near={5}
          fov={45}
          position={[-16.4, 282.04, 1359.94]}
          rotation={[0, 0, 0]}
        />
        <mesh
          name="Cube1"
          geometry={nodes.Cube1.geometry}
          material={materials['Cube1 Material']}
          castShadow
          receiveShadow
          position={[349.75, 61.5, 81]}
        />
        <mesh
          name="Plane"
          geometry={nodes.Plane.geometry}
          material={materials['Plane Material']}
          castShadow
          receiveShadow
          position={[-17.72, -43.91, -1446.76]}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <mesh
          name="Sphere"
          geometry={nodes.Sphere.geometry}
          material={materials['Sphere Material']}
          castShadow
          receiveShadow
          position={[-226.53, 311.53, 39]}
        />

        <Physics iterations={6}>
          <Debug scale={1.1} color="black">
            <Ground rotation={[-Math.PI / 2, 0, 0]} position={[0, -3, 0]} />

            <Ball2 position={[0, 112, 0]} rotation={[0.6, 0.5, 0]} />

          </Debug>
        </Physics>

        <hemisphereLight name="Default Ambient Light" intensity={0.75} color="#eaeaea" />
      </group>


    </>
  )
}

function Ground(props) {
  usePlane(() => ({ type: 'Static', ...props }))
  return <ContactShadows position={[0, -3, 0]} scale={1200} blur={2} far={3} opacity={0.75} />
}

